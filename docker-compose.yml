version: '3'

services:
    app:
        image: address_change_api
        env_file:
            - ./django_config/djangoenv
        build:
            context: .
        container_name: address_change_api
        ports:
            - '8000:8000'
            - '8001:8001'
        volumes:
            - ./app:/app
        # command: poetry run gunicorn app.wsgi:application --bind 0.0.0.0:8000 --reload
        # command: poetry run python manage.py runserver 0.0.0.0:8000
        # command: poetry run daphne -b 0.0.0.0 -p 8001 app.asgi:application
        depends_on:
            - mysql
        networks:
            - backend

    nginx:
        image: nginx:latest # nginx 서비스에서 사용할 도커 이미지
        container_name: web_server
        ports:
            - '80:80'
        volumes:
            - ./app:/app
            - ./config/nginx:/etc/nginx/conf.d
            - ./.static_root/:/static
        depends_on: # 서비스 간의 종속성 표현
            - app
        networks:
            - backend

    redis:
        image: redis:5
        container_name: channel_redis
        command: redis-server --port 6379
        hostname: redis_boot
        labels:
            - 'name=redis'
            - 'mode=standalone'
        ports:
            - '6379:6379'
        networks:
            backend:
                ipv4_address: 172.21.0.2

    mysql:
        image: mysql
        container_name: mysql_service
        cap_add:
            - SYS_NICE
        env_file:
            - ./mysql_docker_config/envs/mysqlenv
        volumes:
            - ./mysql_docker_config/volumes-mysql/mysql/:/var/lib/mysql/
        command: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci
        ports:
            - '3306:3306'
        networks:
            backend:
                ipv4_address: 172.21.0.3

# networks:
#     backend:
#         driver: bridge
networks:
    backend:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.21.0.0/24
            # gateway: '192.168.0.1'
